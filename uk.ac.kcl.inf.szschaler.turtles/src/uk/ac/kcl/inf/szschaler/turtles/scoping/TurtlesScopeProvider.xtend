/*
 * generated by Xtext 2.18.0.M3
 */
package uk.ac.kcl.inf.szschaler.turtles.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import uk.ac.kcl.inf.szschaler.turtles.turtles.IntExpression
import uk.ac.kcl.inf.szschaler.turtles.turtles.IntVarExpression
import uk.ac.kcl.inf.szschaler.turtles.turtles.LoopStatement
import uk.ac.kcl.inf.szschaler.turtles.turtles.TurtleProgram
import uk.ac.kcl.inf.szschaler.turtles.turtles.VariableDeclaration

import static org.eclipse.xtext.scoping.Scopes.*

import static extension org.eclipse.xtext.EcoreUtil2.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class TurtlesScopeProvider extends AbstractDeclarativeScopeProvider {
	def IScope scope_IntVarExpression_var(IntVarExpression context, EReference ref) {
		context.visibleVariablesScope
	}
	
	private def IScope visibleVariablesScope (IntExpression ie) {
		val loopStatementContainer = ie.getContainerOfType(LoopStatement)
		
		if (loopStatementContainer !== null) {
			loopStatementContainer.visibleVariablesScope
		} else {
			val program = ie.getContainerOfType(TurtleProgram)
			program.visibleVariablesScope
		}
	}
	
	private def IScope visibleVariablesScope(TurtleProgram tp) {
		scopeFor(tp.statements.filter(VariableDeclaration))
	}
	
	private def IScope visibleVariablesScope(LoopStatement ls) {
		ls.eContainer.internalVisibleVariablesScope
	}

	private def IScope internalVisibleVariablesScope(EObject eo) {
		if (eo instanceof TurtleProgram) {
			scopeFor(eo.statements.filter(VariableDeclaration))			
		} else if (eo instanceof LoopStatement) {
			scopeFor(eo.statements.filter(VariableDeclaration), eo.eContainer.internalVisibleVariablesScope)			
		} else {
			scopeFor(emptySet)
		}
	}
}
