/*
 * generated by Xtext 2.18.0.M3
 */
package uk.ac.kcl.inf.szschaler.turtles.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TurtlesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TurtleProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.TurtleProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//TurtleProgram:
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//	MoveStatement | TurnStatement | LoopStatement | VariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//MoveStatement | TurnStatement | LoopStatement | VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveStatement
		public RuleCall getMoveStatementParserRuleCall_0() { return cMoveStatementParserRuleCall_0; }
		
		//TurnStatement
		public RuleCall getTurnStatementParserRuleCall_1() { return cTurnStatementParserRuleCall_1; }
		
		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_2() { return cLoopStatementParserRuleCall_2; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_3() { return cVariableDeclarationParserRuleCall_3; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//	"var" name=ID "=" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}
	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCountIntExpressionParserRuleCall_0_0 = (RuleCall)cCountAssignment_0.eContents().get(0);
		private final Keyword cTimesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LoopStatement:
		//	count=IntExpression "times" "do"
		//	statements+=Statement+
		//	"end";
		@Override public ParserRule getRule() { return rule; }
		
		//count=IntExpression "times" "do" statements+=Statement+ "end"
		public Group getGroup() { return cGroup; }
		
		//count=IntExpression
		public Assignment getCountAssignment_0() { return cCountAssignment_0; }
		
		//IntExpression
		public RuleCall getCountIntExpressionParserRuleCall_0_0() { return cCountIntExpressionParserRuleCall_0_0; }
		
		//"times"
		public Keyword getTimesKeyword_1() { return cTimesKeyword_1; }
		
		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//statements+=Statement+
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class MoveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.MoveStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandMoveCommandEnumRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsIntExpressionParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MoveStatement:
		//	command=MoveCommand "(" steps=IntExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//command=MoveCommand "(" steps=IntExpression ")"
		public Group getGroup() { return cGroup; }
		
		//command=MoveCommand
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//MoveCommand
		public RuleCall getCommandMoveCommandEnumRuleCall_0_0() { return cCommandMoveCommandEnumRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//steps=IntExpression
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }
		
		//IntExpression
		public RuleCall getStepsIntExpressionParserRuleCall_2_0() { return cStepsIntExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TurnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.TurnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandTurnCommandEnumRuleCall_1_0 = (RuleCall)cCommandAssignment_1.eContents().get(0);
		private final Keyword cByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDegreesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDegreesREALParserRuleCall_3_0 = (RuleCall)cDegreesAssignment_3.eContents().get(0);
		private final Keyword cDegreesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TurnStatement:
		//	"turn" command=TurnCommand "by" degrees=REAL "degrees";
		@Override public ParserRule getRule() { return rule; }
		
		//"turn" command=TurnCommand "by" degrees=REAL "degrees"
		public Group getGroup() { return cGroup; }
		
		//"turn"
		public Keyword getTurnKeyword_0() { return cTurnKeyword_0; }
		
		//command=TurnCommand
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }
		
		//TurnCommand
		public RuleCall getCommandTurnCommandEnumRuleCall_1_0() { return cCommandTurnCommandEnumRuleCall_1_0; }
		
		//"by"
		public Keyword getByKeyword_2() { return cByKeyword_2; }
		
		//degrees=REAL
		public Assignment getDegreesAssignment_3() { return cDegreesAssignment_3; }
		
		//REAL
		public RuleCall getDegreesREALParserRuleCall_3_0() { return cDegreesREALParserRuleCall_3_0; }
		
		//"degrees"
		public Keyword getDegreesKeyword_4() { return cDegreesKeyword_4; }
	}
	public class IntExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.IntExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValINTTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_1_0.eContents().get(1);
		
		//IntExpression:
		//	val=INT | var=[VariableDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT | var=[VariableDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val=INT
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0_0() { return cValINTTerminalRuleCall_0_0; }
		
		//var=[VariableDeclaration]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_1_0() { return cVarVariableDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_1_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL ecore::EFloat hidden():
		//	INT? "." INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	public class MoveCommandElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.MoveCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForwardEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForwardForwardKeyword_0_0 = (Keyword)cForwardEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBackwardEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBackwardBackwardKeyword_1_0 = (Keyword)cBackwardEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MoveCommand:
		//	forward | backward;
		public EnumRule getRule() { return rule; }
		
		//forward | backward
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//forward
		public EnumLiteralDeclaration getForwardEnumLiteralDeclaration_0() { return cForwardEnumLiteralDeclaration_0; }
		
		//"forward"
		public Keyword getForwardForwardKeyword_0_0() { return cForwardForwardKeyword_0_0; }
		
		//backward
		public EnumLiteralDeclaration getBackwardEnumLiteralDeclaration_1() { return cBackwardEnumLiteralDeclaration_1; }
		
		//"backward"
		public Keyword getBackwardBackwardKeyword_1_0() { return cBackwardBackwardKeyword_1_0; }
	}
	public class TurnCommandElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.szschaler.turtles.Turtles.TurnCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLeftKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightRightKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TurnCommand:
		//	left | right;
		public EnumRule getRule() { return rule; }
		
		//left | right
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }
		
		//"left"
		public Keyword getLeftLeftKeyword_0_0() { return cLeftLeftKeyword_0_0; }
		
		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }
		
		//"right"
		public Keyword getRightRightKeyword_1_0() { return cRightRightKeyword_1_0; }
	}
	
	private final TurtleProgramElements pTurtleProgram;
	private final StatementElements pStatement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final LoopStatementElements pLoopStatement;
	private final MoveStatementElements pMoveStatement;
	private final MoveCommandElements eMoveCommand;
	private final TurnStatementElements pTurnStatement;
	private final TurnCommandElements eTurnCommand;
	private final IntExpressionElements pIntExpression;
	private final REALElements pREAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TurtlesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTurtleProgram = new TurtleProgramElements();
		this.pStatement = new StatementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pMoveStatement = new MoveStatementElements();
		this.eMoveCommand = new MoveCommandElements();
		this.pTurnStatement = new TurnStatementElements();
		this.eTurnCommand = new TurnCommandElements();
		this.pIntExpression = new IntExpressionElements();
		this.pREAL = new REALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.szschaler.turtles.Turtles".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TurtleProgram:
	//	statements+=Statement*;
	public TurtleProgramElements getTurtleProgramAccess() {
		return pTurtleProgram;
	}
	
	public ParserRule getTurtleProgramRule() {
		return getTurtleProgramAccess().getRule();
	}
	
	//Statement:
	//	MoveStatement | TurnStatement | LoopStatement | VariableDeclaration;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//VariableDeclaration:
	//	"var" name=ID "=" value=INT;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//LoopStatement:
	//	count=IntExpression "times" "do"
	//	statements+=Statement+
	//	"end";
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}
	
	//MoveStatement:
	//	command=MoveCommand "(" steps=IntExpression ")";
	public MoveStatementElements getMoveStatementAccess() {
		return pMoveStatement;
	}
	
	public ParserRule getMoveStatementRule() {
		return getMoveStatementAccess().getRule();
	}
	
	//enum MoveCommand:
	//	forward | backward;
	public MoveCommandElements getMoveCommandAccess() {
		return eMoveCommand;
	}
	
	public EnumRule getMoveCommandRule() {
		return getMoveCommandAccess().getRule();
	}
	
	//TurnStatement:
	//	"turn" command=TurnCommand "by" degrees=REAL "degrees";
	public TurnStatementElements getTurnStatementAccess() {
		return pTurnStatement;
	}
	
	public ParserRule getTurnStatementRule() {
		return getTurnStatementAccess().getRule();
	}
	
	//enum TurnCommand:
	//	left | right;
	public TurnCommandElements getTurnCommandAccess() {
		return eTurnCommand;
	}
	
	public EnumRule getTurnCommandRule() {
		return getTurnCommandAccess().getRule();
	}
	
	//IntExpression:
	//	val=INT | var=[VariableDeclaration];
	public IntExpressionElements getIntExpressionAccess() {
		return pIntExpression;
	}
	
	public ParserRule getIntExpressionRule() {
		return getIntExpressionAccess().getRule();
	}
	
	//REAL ecore::EFloat hidden():
	//	INT? "." INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
